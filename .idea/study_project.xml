<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <EduCourse>
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="Marcin" />
                <option name="id" value="1716082" />
                <option name="lastName" value="Moskala" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Study" />
          <option name="createDate" value="1552736795000" />
          <option name="customPresentableName" />
          <option name="description" value="Exercises for advanced Kotlin Course conducted by Kt. Academy" />
          <option name="environment" value="" />
          <option name="id" value="52927" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="1716082" />
            </list>
          </option>
          <option name="language" value="kotlin" />
          <option name="languageCode" value="en" />
          <option name="name" value="Advanced Kotlin Course Kt. Academy" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list />
          </option>
          <option name="type" value="pycharm10 kotlin" />
          <option name="updateDate" value="1553196731000" />
          <option name="items">
            <list>
              <Section>
                <option name="courseId" value="52927" />
                <option name="customPresentableName" />
                <option name="id" value="80597" />
                <option name="index" value="1" />
                <option name="name" value="Advanced Kotlin Course" />
                <option name="position" value="1" />
                <option name="updateDate" value="1553196730000" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="214910" />
                      <option name="index" value="1" />
                      <option name="name" value="Preparation" />
                      <option name="updateDate" value="1553196729000" />
                      <option name="unitId" value="188029" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h2&gt;Hello, World&lt;/h2&gt;&#10;&lt;p&gt;Just return &quot;Hello, World&quot;&lt;/p&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="647722" />
                            <option name="index" value="1" />
                            <option name="name" value="Hello World" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun helloWorld(): String = &quot;Hello, World&quot;&#10;&#10;// This is how Hello World program looks like in Kotlin&#10;&#10;fun main() {&#10;    val list = listOf(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)&#10;    for((i, elem) in list.withIndex()) {&#10;        println(&quot;At $i there is $elem&quot;)&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        Assert.assertEquals(&quot;Hello, World&quot;, helloWorld())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1553196728000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&#10;&lt;h2&gt;Greatest Common Denuminator&lt;/h2&gt;&#10;&#10;The common algorithm to find GCD it is:&#10;&#10;&lt;ul&gt;&#10;  &lt;li&gt;&lt;code&gt;gcd(a, 0) = a&lt;/code&gt;&lt;/li&gt;&#10;  &lt;li&gt;&lt;code&gt;gcd(a, b) = gcd(b, a mod b)&lt;/code&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  More about this function on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Greatest_common_divisor&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;Wikipedia&lt;/a&gt;.&#10;&lt;/div&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650727" />
                            <option name="index" value="2" />
                            <option name="name" value="GCD" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun gcd(a: Int, b: Int): Int = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Assert.*&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun `gcd returnes x for x and x`() {&#10;        assertEquals(5, gcd(5, 5))&#10;        assertEquals(7, gcd(7, 7))&#10;        for (x in 1..100) {&#10;            assertEquals(x, gcd(x, x))&#10;        }&#10;    }&#10;&#10;    @Test&#10;    fun `gcd returnes 1 when x and y are primes`() {&#10;        assertEquals(1, gcd(3, 7))&#10;        assertEquals(1, gcd(5, 7))&#10;&#10;        for ((x, y) in twoDifferentPrimesPermutations) {&#10;            assertEquals(&quot;Should be 1 for $x and $y, but is ${gcd(x, y)}&quot;, 1, gcd(x, y))&#10;        }&#10;    }&#10;&#10;    @Test&#10;    fun `gcd for simple examples`() {&#10;        assertEquals(4, gcd(12, 8))&#10;        assertEquals(6, gcd(12, 6))&#10;        assertEquals(14, gcd(42, 56))&#10;        assertEquals(18, gcd(461952, 116298))&#10;        assertEquals(32, gcd(7966496, 314080416))&#10;        assertEquals(526, gcd(24826148, 45296490))&#10;    }&#10;&#10;    @Test&#10;    fun `gcd x and 0 gives x`() {&#10;        assertEquals(12, gcd(12, 0))&#10;        assertEquals(0, gcd(0, 0))&#10;        assertEquals(9, gcd(0, 9))&#10;    }&#10;&#10;    companion object {&#10;        private val somePrimes = listOf(2, 3, 5, 7, 11, 13, 17, 19)&#10;&#10;        private val twoDifferentPrimesPermutations = somePrimes&#10;                .flatMap { p1 -&gt; somePrimes.map { p2 -&gt; p1 to p2 } }&#10;                .filter { (p1, p2) -&gt; p1 != p2 }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1553196729000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h2&gt;Fizz Buzz function&lt;/h2&gt;&#10;&lt;p&gt;Implement &lt;code&gt;fizzBuzz&lt;/code&gt; function that returns String that represents what should be said in the FizzBuzz game for each&#10;    number between 1 and 100.&lt;/p&gt;&#10;&lt;p&gt;We list all this numbers in new lines, but we replace some of them with:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&quot;Fizz&quot; if number is divisible by 3&lt;/li&gt;&#10;    &lt;li&gt;&quot;Buzz&quot; if number is divisible by 5&lt;/li&gt;&#10;    &lt;li&gt;&quot;FizzBuzz&quot; if number is divisible both by 3 and 5 (by 15)&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;Print next numbers using print function&lt;/p&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="647723" />
                            <option name="index" value="3" />
                            <option name="name" value="Fizz Buzz" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Print.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Print.kt" />
                                      <option name="text" value="var printed = &quot;&quot;&#10;fun print(string: String) {&#10;    printed += string&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun fizzBuzz()  {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun fizzBuzzFirstTest() {&#10;        printed = &quot;&quot;&#10;        fizzBuzz()&#10;        Assert.assertEquals(&quot;1&quot;, printed.take(1))&#10;    }&#10;    @Test&#10;    fun fizzBuzzThreeTest() {&#10;        printed = &quot;&quot;&#10;        fizzBuzz()&#10;        Assert.assertEquals(&quot;12Fizz&quot;, printed.take(6))&#10;    }&#10;    @Test&#10;    fun fizzBuzzFiveTest() {&#10;        printed = &quot;&quot;&#10;        fizzBuzz()&#10;        Assert.assertEquals(&quot;12Fizz4Buzz&quot;, printed.take(11))&#10;    }&#10;    @Test&#10;    fun fizzBuzzLongTest() {&#10;        printed = &quot;&quot;&#10;        fizzBuzz()&#10;        val solution = &quot;12Fizz4BuzzFizz78FizzBuzz11Fizz1314FizzBuzz1617Fizz19BuzzFizz2223FizzBuzz26Fizz2829FizzBuzz3132Fizz34BuzzFizz3738FizzBuzz41Fizz4344FizzBuzz4647Fizz49BuzzFizz5253FizzBuzz56Fizz5859FizzBuzz6162Fizz64BuzzFizz6768FizzBuzz71Fizz7374FizzBuzz7677Fizz79BuzzFizz8283FizzBuzz86Fizz8889FizzBuzz9192Fizz94BuzzFizz9798FizzBuzz&quot;&#10;        Assert.assertEquals(solution, printed.trim())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926330000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h2&gt;Fibonacci numbers&lt;/h2&gt;&#10;&lt;p&gt;In mathematics, the Fibonacci numbers, commonly denoted Fn form a sequence, called the Fibonacci sequence, such that&#10;    each number is the sum of the two preceding ones, starting from 0 and 1. That is,&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(0) = 0&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(1) = 1&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Then, every next number is calculated using:&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(n) = fib(n - 1) + fib(n - 2)&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Therefore:&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(2) = 1&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(3) = 2&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(4) = 3&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(5) = 5&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(6) = 8&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(7) = 13&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(8) = 21&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(9) = 34&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;&lt;code&gt;fib(10) = 55&lt;/code&gt;&lt;/p&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="647724" />
                            <option name="index" value="4" />
                            <option name="name" value="Fibonacci" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun fib(n: Int): Int  = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestFib {&#10;&#10;    @Test&#10;    fun testFib() {&#10;        Assert.assertEquals(0, fib(0))&#10;        Assert.assertEquals(1, fib(1))&#10;        Assert.assertEquals(1, fib(2))&#10;        Assert.assertEquals(2, fib(3))&#10;        Assert.assertEquals(3, fib(4))&#10;        Assert.assertEquals(5, fib(5))&#10;        Assert.assertEquals(8, fib(6))&#10;        Assert.assertEquals(13, fib(7))&#10;        Assert.assertEquals(21, fib(8))&#10;        Assert.assertEquals(34, fib(9))&#10;        Assert.assertEquals(55, fib(10))&#10;        Assert.assertEquals(89, fib(11))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926330000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="215385" />
                      <option name="index" value="2" />
                      <option name="name" value="Functions" />
                      <option name="updateDate" value="1553196729000" />
                      <option name="unitId" value="188466" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Hello, World&lt;/h1&gt;&#10;You already know how to make an entry point, but how does it translates to JVM bytecode? How is it possible that&#10;function without class is executed? Let's find out! (This exercise is for those present on the Kt. Academy workshop).&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650702" />
                            <option name="index" value="1" />
                            <option name="name" value="Hello World" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun main() {&#10;    println(&quot;Hello, World&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        // Always pass&#10;        Assert.assertTrue(true)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926331000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Biggest&lt;/h1&gt;&#10;Implement function biggest that takes 3 arguments of type Int, and returns the biggest among them.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651397" />
                            <option name="index" value="2" />
                            <option name="name" value="Biggest" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="7" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="99" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="// TODO" />
                                            <option name="possibleAnswer" value="fun biggest(a: Int, b: Int, c: Int) = when {&#10;    a &gt; b &amp;&amp; a &gt; c -&gt; a&#10;    b &gt; c -&gt; b&#10;    else -&gt; c&#10;}" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="// TODO" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        Assert.assertEquals(2, biggest(2,1,0))&#10;        Assert.assertEquals(2, biggest(0,1,2))&#10;        Assert.assertEquals(2, biggest(2,2,0))&#10;        Assert.assertEquals(0, biggest(-2,-20,0))&#10;        Assert.assertEquals(3, biggest(1,2,3))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1553196729000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Default &lt;/h1&gt;&#10;Default arguments are values used when we want to be able omit an argument&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;fun cheer(&#10;   how: String = &quot;Hello, &quot;,&#10;   who: String = &quot;World&quot;&#10;) {&#10;   print(&quot;$how $who&quot;)&#10;}&#10;&#10;cheer() // Hello, World&#10;cheer(&quot;Hi &quot;) // Hi World&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;We use named arguments to set concrete one or to name an argument:&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;cheer(who = &quot;group&quot;) // Hello, group&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650703" />
                            <option name="index" value="3" />
                            <option name="name" value="Arguments" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="19" />
                                                <option name="offset" value="81" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="26" />
                                            <option name="offset" value="36" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value=", separator: String" />
                                            <option name="possibleAnswer" value=", separator: String = &quot;, &quot;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="50" />
                                                <option name="offset" value="176" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="67" />
                                            <option name="offset" value="105" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="fun changeSeparator() = joinStrings(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)" />
                                            <option name="possibleAnswer" value="fun changeSeparator() = joinStrings(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, separator = &quot;.&quot;)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="// TODO: Set separator default value to &quot;, &quot;&#10;fun joinStrings(vararg texts: String, separator: String) =&#10;        texts.joinToString(separator)&#10;&#10;// TODO: Change separator to &quot;.&quot;&#10;fun changeSeparator() = joinStrings(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)&#10;&#10;fun main() {&#10;    print(&quot;Hello, World&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;&#10;    @Test&#10;    fun defaultSeparatorSolution() {&#10;        Assert.assertEquals(&quot;A, B, C&quot;, joinStrings(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun changingSeparatorSolution() {&#10;        Assert.assertEquals(&quot;A.B.C&quot;, changeSeparator())&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552989990000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Factorial&lt;/h1&gt;&#10;Implement factorial function, that calculates product of all numbers from 1 to the argument, or 1 if&#10;&lt;pre&gt;&lt;code&gt;&#10;factorial(1) = 5! = 1&#10;factorial(2) = 5! = 2 * 1 = 2&#10;factorial(3) = 5! = 3 * 2 * 1 = 6&#10;factorial(4) = 5! = 4 * 3 * 2 * 1 = 24&#10;factorial(5) = 5! = 5 * 4 * 3 * 2 * 1 = 120&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650704" />
                            <option name="index" value="4" />
                            <option name="name" value="Factorial" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun factorial(n: Int): Long = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testResult() {&#10;        val numberWithFactorial = mapOf(&#10;                0 to 1L,&#10;                1 to 1L,&#10;                2 to 2L,&#10;                3 to 6L,&#10;                4 to 24L,&#10;                10 to 3628800L,&#10;                15 to 1307674368000L,&#10;                20 to 2432902008176640000L&#10;        )&#10;        for ((i, factorialResult) in numberWithFactorial) {&#10;            Assert.assertEquals(factorialResult, factorial(i))&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552989990000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Tree&lt;/h1&gt;&#10;Clean it up using what you've learned during the workshop.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Keep using &lt;code&gt;StringBuilder&lt;/code&gt;.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650705" />
                            <option name="index" value="5" />
                            <option name="name" value="Tree" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="abstract class Tree {&#10;    override fun toString(): String {&#10;        return treeToString(this, StringBuilder()).toString()&#10;    }&#10;}&#10;class Leaf(val value: String): Tree()&#10;class Node(val left: Tree, val right: Tree): Tree()&#10;&#10;private fun treeToString(tree: Tree, sb: StringBuilder): StringBuilder {&#10;    if(tree is Leaf) {&#10;        val leaf = tree as Leaf&#10;        sb.append(leaf.value)&#10;    } else if(tree is Node) {&#10;        val node = tree as Node&#10;        treeToString(node.left, sb)&#10;        sb.append(&quot;, &quot;)&#10;        treeToString(node.right, sb)&#10;    }&#10;    return sb&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        Assert.assertTrue(true)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552989991000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Nullability&lt;/h1&gt;&#10;Rewrite the following Java method in Kotlin in 3 lines:&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;public static void sendMessageToClient(&#10;    @Nullable Client client,&#10;    @Nullable String message,&#10;    @NotNull Mailer mailer&#10;) {&#10;    if (client == null || message == null) {&#10;        return;&#10;    }&#10;&#10;    PersonalInfo personalInfo = client.getPersonalInfo();&#10;    if (personalInfo == null) {&#10;        return;&#10;    }&#10;&#10;    String email = personalInfo.getEmail();&#10;    if (email == null) {&#10;        return;&#10;    }&#10;&#10;    mailer.sendMessage(email, message);&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;br&gt;&#10;Exercise originally published on the Kotlin Koans.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;If you finish it and you still have some time, try different variants:&#10;&lt;ul&gt;&#10;    &lt;li&gt;Without using Elvis operator at all&lt;/li&gt;&#10;    &lt;li&gt;Without using &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;when&lt;/code&gt; at all&lt;/li&gt;&#10;    &lt;li&gt;Without using smart casting at all&lt;/li&gt;&#10;    &lt;li&gt;Using only smart casting - without using equality sign at all&lt;/li&gt;&#10;&lt;/ul&gt;&#10;Compare them. Which one do you like the most?&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650706" />
                            <option name="index" value="6" />
                            <option name="name" value="Nullability" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class Client(val personalInfo: PersonalInfo?)&#10;class PersonalInfo(val email: String?)&#10;&#10;interface Mailer {&#10;    fun sendMessage(email: String, message: String)&#10;}&#10;&#10;fun sendMessageToClient(client: Client?, message: String?, mailer: Mailer) {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.*&#10;import org.junit.Test&#10;&#10;class MailCollector(): Mailer {&#10;    data class Mail(val email: String, val message: String)&#10;&#10;    val emails = mutableListOf&lt;Mail&gt;()&#10;&#10;    override fun sendMessage(email: String, message: String) {&#10;        emails += Mail(email, message)&#10;    }&#10;}&#10;&#10;class Test {&#10;    private val empty = mutableListOf&lt;MailCollector.Mail&gt;()&#10;&#10;    @Test&#10;    fun `When client is null, email we do not send email`() {&#10;        val mailer = MailCollector()&#10;        sendMessageToClient(null, &quot;AAA&quot;, mailer)&#10;        assertEquals(empty, mailer.emails)&#10;    }&#10;&#10;    @Test&#10;    fun `When message is null, we do not send email`() {&#10;        val mailer = MailCollector()&#10;        sendMessageToClient(Client(PersonalInfo(&quot;AAA&quot;)), null, mailer)&#10;        assertEquals(empty, mailer.emails)&#10;    }&#10;&#10;    @Test&#10;    fun `When personal info is null, we do not send email`() {&#10;        val mailer = MailCollector()&#10;        sendMessageToClient(Client(null), &quot;AAA&quot;, mailer)&#10;        assertEquals(empty, mailer.emails)&#10;    }&#10;&#10;    @Test&#10;    fun `When email address is null, we do not send email`() {&#10;        val mailer = MailCollector()&#10;        sendMessageToClient(Client(PersonalInfo(null)), null, mailer)&#10;        assertEquals(empty, mailer.emails)&#10;    }&#10;&#10;    @Test&#10;    fun `Sends messages correctly for correct values`() {&#10;        val mailer = MailCollector()&#10;        sendMessageToClient(Client(PersonalInfo(&quot;AAA&quot;)), &quot;BBB&quot;, mailer)&#10;        assertEquals(mutableListOf(MailCollector.Mail(&quot;AAA&quot;, &quot;BBB&quot;)), mailer.emails)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996678000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <FrameworkLesson>
                      <option name="currentTaskIndex" value="3" />
                      <option name="customPresentableName" />
                      <option name="id" value="215386" />
                      <option name="index" value="3" />
                      <option name="name" value="Classes and objects" />
                      <option name="updateDate" value="1552989995000" />
                      <option name="unitId" value="0" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h2&gt;Classes and interfaces&lt;/h2&gt;&#10;&lt;p&gt;Implement class &lt;code&gt;Businessman&lt;/code&gt; that implements &lt;code&gt;Person&lt;/code&gt; Pass name and age as primary constructor arguments. Businessman is very polite he says hello by &lt;code&gt;&quot;Good morning&quot;&lt;/code&gt; he cheers another person by &lt;code&gt;&quot;Hello, my name is {businessman name}, nice to see you {another person name}&quot;&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Implement class &lt;code&gt;Student&lt;/code&gt; that implements &lt;code&gt;Person&lt;/code&gt; Pass name and age as primary constructor arguments. Student is chilled out he says hello by &lt;code&gt;&quot;Hi&quot;&lt;/code&gt; he cheers another person by &lt;code&gt;&quot;Hey {another person name}, I am {students name}&quot;&lt;/code&gt;&lt;/p&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650707" />
                            <option name="index" value="1" />
                            <option name="name" value="Person" />
                            <option name="record" value="1" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="interface Person {&#10;    val name: String&#10;    val age: Int&#10;&#10;    // Always true when age &gt;= 21&#10;    val canBuyAlcohol: Boolean&#10;&#10;    fun helloText(): String&#10;&#10;    fun cheerText(person: Person): String&#10;}&#10;&#10;// TODO: Implement here class Businessman that implements Person&#10;// TODO: Implement here class Student that implements Person" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class PersonTest {&#10;&#10;    @Test&#10;    fun businessmanImplementsPerson() {&#10;        Assert.assertTrue(&quot;Businessman needs to be a person&quot;, Businessman(&quot;AAA&quot;, 30) is Person)&#10;    }&#10;&#10;    @Test&#10;    fun studentImplementsPerson() {&#10;        Assert.assertTrue(&quot;Student needs to be a person&quot;, Student(&quot;AAA&quot;, 30) is Person)&#10;    }&#10;&#10;    @Test&#10;    fun personCanBuyAlcoholIfOver21() {&#10;        Assert.assertTrue(&quot;Adult businessman can buy alcohol&quot;, Businessman(&quot;AAA&quot;, 30).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Adult businessman can buy alcohol&quot;, Businessman(&quot;AAA&quot;, 21).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young businessman can' buy alcohol&quot;, !Businessman(&quot;AAA&quot;, 19).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young businessman can' buy alcohol&quot;, !Businessman(&quot;AAA&quot;, 17).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Adult student can buy alcohol&quot;, Student(&quot;AAA&quot;, 30).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Adult student can buy alcohol&quot;, Student(&quot;AAA&quot;, 21).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young student can' buy alcohol&quot;, !Student(&quot;AAA&quot;, 19).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young student can' buy alcohol&quot;, !Student(&quot;AAA&quot;, 17).canBuyAlcohol)&#10;    }&#10;&#10;    @Test&#10;    fun testBusinessmanHelloText() {&#10;        Assert.assertEquals(&quot;Good morning&quot;, Businessman(&quot;AAA&quot;, 30).helloText())&#10;    }&#10;&#10;    @Test&#10;    fun testStudentHelloText() {&#10;        Assert.assertEquals(&quot;Hi&quot;, Student(&quot;AAA&quot;, 30).helloText())&#10;    }&#10;&#10;    @Test&#10;    fun testStudentGreetText() {&#10;        val name1 = &quot;Some name&quot;&#10;        val name2 = &quot;Another name&quot;&#10;        val student = Student(name1, 12)&#10;        val businessman = Businessman(name2, 12)&#10;        Assert.assertEquals(&quot;Hey $name2, I am $name1&quot;, Student(name1, 30).cheerText(businessman))&#10;        Assert.assertEquals(&quot;Hey $name1, I am $name2&quot;, Student(name2, 30).cheerText(student))&#10;    }&#10;&#10;    @Test&#10;    fun testBusinessmanGreetText() {&#10;        val name1 = &quot;Some name&quot;&#10;        val name2 = &quot;Another name&quot;&#10;        val student = Student(name1, 12)&#10;        val businessman = Businessman(name2, 12)&#10;        Assert.assertEquals(&quot;Hello, my name is $name1, nice to see you $name2&quot;, Businessman(name1, 30).cheerText(businessman))&#10;        Assert.assertEquals(&quot;Hello, my name is $name2, nice to see you $name1&quot;, Businessman(name2, 30).cheerText(student))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552989992000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Factory Methods&lt;/h1&gt;&#10;Make a factory method that can be used this way:&lt;br&gt;&#10;&lt;code&gt;val pizza = Pizza.hawaiian()&lt;/code&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;It should produce a pizza with 1 cheese, ham and pineapple same as this one:&lt;br&gt;&#10;&lt;code&gt;Pizza(cheese = 1, pineapple = 1, ham = 1)&lt;/code&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650708" />
                            <option name="index" value="2" />
                            <option name="name" value="Pizza" />
                            <option name="record" value="2" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="data class Pizza(&#10;        val cheese: Int = 0,&#10;        val pineapple: Int = 0,&#10;        val ham: Int = 0,&#10;        val egg: Int = 0,&#10;        val spinach: Int = 0&#10;)&#10;&#10;fun main() {&#10;    val pizza = Pizza.hawaiian()&#10;    assert(pizza == Pizza(cheese = 1, pineapple = 1, ham = 1))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertTrue&#10;import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class PizzaTest {&#10;&#10;    @Test&#10;    fun pizzaCheck() {&#10;        assertTrue(Pizza.hawaiian() == Pizza(cheese = 1, pineapple = 1, ham = 1))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552989993000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Update this &lt;code&gt;product&lt;/code&gt; function to make it accept list as an extension receiver instead of as a standard argument.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You should allow this way the following use:&lt;br&gt;&#10;&lt;code&gt;print(listOf(1,2,3).product())&lt;/code&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650710" />
                            <option name="index" value="3" />
                            <option name="name" value="Product" />
                            <option name="record" value="3" />
                            <option name="status" value="Solved" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun product(iterable: Iterable&lt;Int&gt;): Int {&#10;    var prod = 1&#10;    for (i in iterable) {&#10;        prod *= i&#10;    }&#10;    return prod&#10;}&#10;&#10;fun main() {&#10;    print(listOf(1,2,3).product())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class Test {&#10;&#10;    @Test&#10;    fun check() {&#10;        val prod = listOf(1,2,3,4,5).product()&#10;        assertEquals(120, prod)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552989994000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Tree operations&lt;/h1&gt;&#10;Implement the following extension functions:&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;code&gt;Tree.plus(Tree): Tree&lt;/code&gt; - Returning a new tree by making a node pointing to the receiver on the left, and to&#10;        the argument on the right.&lt;/li&gt;    &lt;li&gt;&lt;code&gt;Tree.count(): Int&lt;/code&gt; - Returning number of leafs in the tree.&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;Tree.height(): Int&lt;/code&gt; - Returning height of tree (longest size from root to a leaf including root).&lt;/li&gt;&#10;    &lt;li&gt;&lt;code&gt;Tree.contains(String): Boolean&lt;/code&gt; - Checking if any of the leafs in the tree contains an element equal (==) to&#10;the one from argument.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650711" />
                            <option name="index" value="4" />
                            <option name="name" value="Tree Operations" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="sealed class Tree&#10;data class Leaf(val value: String) : Tree()&#10;data class Node(val left: Tree, val right: Tree) : Tree()&#10;&#10;// Implement operations here&#10;&#10;fun main() {&#10;    val tree = Node(Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)), Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)))&#10;    println(Leaf(&quot;A&quot;).plus(Leaf(&quot;B&quot;))) // Node(left=Leaf(value=A), right=Leaf(value=B))&#10;    assert(Leaf(&quot;A&quot;).plus(Leaf(&quot;B&quot;)) == Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)))&#10;&#10;    println(Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)).plus(Leaf(&quot;C&quot;))) // Node(left=Node(left=Leaf(value=A), right=Leaf(value=B)), right=Leaf(value=C))&#10;    assert(Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)).plus(Leaf(&quot;C&quot;)) == Node(Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)), Leaf(&quot;C&quot;)))&#10;&#10;    println(tree.count()) // 6&#10;    println(tree.height()) // 4&#10;&#10;    println(tree.contains(&quot;AAA&quot;)) // true&#10;    println(tree.contains(&quot;DDD&quot;)) // false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class TreeOperationsTest {&#10;    /*&#10;            root Node&#10;            /      \&#10;          Node     CCC&#10;         /    \&#10;       AAA    BBB&#10;     */&#10;    private val tree1 = Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;))&#10;&#10;    /*&#10;                    root Node&#10;                   /         \&#10;               Node           Node&#10;            /      \        /      \&#10;          Node     CCC    Node     CCC&#10;         /    \          /    \&#10;       AAA    BBB      AAA    BBB&#10;     */&#10;    private val tree2 =&#10;            Node(Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)), Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)))&#10;&#10;    /*&#10;                root Node&#10;                /     \&#10;              Node    DDD&#10;            /      \&#10;          Node     CCC&#10;         /    \&#10;       AAA    BBB&#10;     */&#10;    private val tree3 = Node(Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)), Leaf(&quot;DDD&quot;))&#10;&#10;    @Test&#10;    fun `Count of a leaf is 1`() {&#10;        assertEquals(1, Leaf(&quot;AAA&quot;).count())&#10;    }&#10;&#10;    @Test&#10;    fun `Count of a single node with two leafs is 2`() {&#10;        assertEquals(2, Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)).count())&#10;    }&#10;&#10;    @Test&#10;    fun `Count returns number of leafs in the tree`() {&#10;        assertEquals(3, tree1.count())&#10;        assertEquals(6, tree2.count())&#10;        assertEquals(4, tree3.count())&#10;    }&#10;&#10;    @Test&#10;    fun `Size of a leaf is 1`() {&#10;        assertEquals(1, Leaf(&quot;AAA&quot;).height())&#10;    }&#10;&#10;    @Test&#10;    fun `Size of a single node with two leafs is 2`() {&#10;        assertEquals(2, Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)).height())&#10;    }&#10;&#10;    @Test&#10;    // Every level in height is one more to the result&#10;    fun `Height returns the highest dustance from the root to a leaf`() {&#10;        assertEquals(3, tree1.height())&#10;        assertEquals(4, tree2.height())&#10;        assertEquals(4, tree3.height())&#10;    }&#10;&#10;    @Test&#10;    fun `Value of a leaf is in this leaf`() {&#10;        assertTrue(Leaf(&quot;AAA&quot;).contains(&quot;AAA&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Node with leafs contains values of its leafs`() {&#10;        val tree = Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;))&#10;        assertTrue(tree.contains(&quot;AAA&quot;))&#10;        assertTrue(tree.contains(&quot;BBB&quot;))&#10;        assertTrue(!tree.contains(&quot;CCC&quot;))&#10;        assertTrue(!tree.contains(&quot;DDD&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Complex cases`() {&#10;        assertTrue(tree1.contains(&quot;AAA&quot;))&#10;        assertTrue(tree1.contains(&quot;BBB&quot;))&#10;        assertTrue(tree1.contains(&quot;CCC&quot;))&#10;        assertTrue(!tree1.contains(&quot;CCCC&quot;))&#10;        assertTrue(!tree1.contains(&quot;D&quot;))&#10;&#10;        assertTrue(tree2.contains(&quot;AAA&quot;))&#10;        assertTrue(tree2.contains(&quot;BBB&quot;))&#10;        assertTrue(tree2.contains(&quot;CCC&quot;))&#10;        assertTrue(!tree2.contains(&quot;CCCC&quot;))&#10;        assertTrue(!tree2.contains(&quot;D&quot;))&#10;&#10;&#10;        assertTrue(tree3.contains(&quot;AAA&quot;))&#10;        assertTrue(tree3.contains(&quot;BBB&quot;))&#10;        assertTrue(tree3.contains(&quot;CCC&quot;))&#10;        assertTrue(tree3.contains(&quot;DDD&quot;))&#10;        assertTrue(!tree3.contains(&quot;CCCC&quot;))&#10;        assertTrue(!tree3.contains(&quot;D&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Plus of two leafs test`() {&#10;        val tree = Leaf(&quot;AAA&quot;).plus(Leaf(&quot;BBB&quot;))&#10;        assertTrue(tree is Node)&#10;        val n = tree as Node&#10;        assertTrue(n.left == Leaf(&quot;AAA&quot;))&#10;        assertTrue(n.right == Leaf(&quot;BBB&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Plus just places subtrees on the left and right side without copying them`() {&#10;        val tree = tree1.plus(tree2)&#10;        assertTrue(tree is Node)&#10;        val n = tree as Node&#10;        assertTrue(n.left === tree1)&#10;        assertTrue(n.right === tree2)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926335000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Tree Operations&lt;/h1&gt;&#10;Make + and * operators allowed for &lt;code&gt;RationalNumber&lt;/code&gt;:&#10;&lt;pre&gt;&lt;code&gt;&#10;r1 + r2&#10;r1 * r2&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  To allow operator overloading, you need correct signature (name, arguments and return type) and &lt;code&gt;operator&lt;/code&gt; modifier.&lt;br&gt;&#10;  + needs &lt;code&gt;plus&lt;/code&gt; method with a single receiver and single argument.&lt;br&gt;&#10;  * needs &lt;code&gt;times&lt;/code&gt; method with a single receiver and single argument.&#10;&lt;/div&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650712" />
                            <option name="index" value="5" />
                            <option name="name" value="Operators" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="data class RationalNumber(val numerator: Int, val denominator: Int)&#10;&#10;fun main() {&#10;    val r1 = RationalNumber(1,2)&#10;    val r2 = RationalNumber(1,3)&#10;&#10;    r1 + r2 == RationalNumber(2,3)&#10;    r1 * r2 == RationalNumber(1,6)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class OperationsTest {&#10;&#10;    @Test&#10;    fun check() {&#10;        val r1 = RationalNumber(1, 2)&#10;        val r2 = RationalNumber(1, 3)&#10;&#10;        assertTrue(r1 + r2 == RationalNumber(2, 3))&#10;        assertTrue(r1 * r2 == RationalNumber(1, 6))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552989995000" />
                          </EduTask>
                        </list>
                      </option>
                    </FrameworkLesson>
                    <Lesson>
                      <option name="customPresentableName" value="Classes and objects" />
                      <option name="id" value="215694" />
                      <option name="index" value="4" />
                      <option name="name" value="Classes and objects (1)" />
                      <option name="updateDate" value="1553196727000" />
                      <option name="unitId" value="188701" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h2&gt;Classes and interfaces&lt;/h2&gt;&#10;&lt;p&gt;Implement class &lt;code&gt;Businessman&lt;/code&gt; that implements &lt;code&gt;Person&lt;/code&gt; Pass name and age as primary constructor arguments. Businessman is very polite he says hello by &lt;code&gt;&quot;Good morning&quot;&lt;/code&gt; he cheers another person by &lt;code&gt;&quot;Hello, my name is {businessman name}, nice to see you {another person name}&quot;&lt;/code&gt;&lt;/p&gt;&#10;&lt;p&gt;Implement class &lt;code&gt;Student&lt;/code&gt; that implements &lt;code&gt;Person&lt;/code&gt; Pass name and age as primary constructor arguments. Student is chilled out he says hello by &lt;code&gt;&quot;Hi&quot;&lt;/code&gt; he cheers another person by &lt;code&gt;&quot;Hey {another person name}, I am {students name}&quot;&lt;/code&gt;&lt;/p&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651524" />
                            <option name="index" value="1" />
                            <option name="name" value="Person" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="interface Person {&#10;    val name: String&#10;    val age: Int&#10;&#10;    // Always true when age &gt;= 21&#10;    val canBuyAlcohol: Boolean&#10;&#10;    fun helloText(): String&#10;&#10;    fun cheerText(person: Person): String&#10;}&#10;&#10;// TODO: Implement here class Businessman that implements Person&#10;// TODO: Implement here class Student that implements Person" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class PersonTest {&#10;&#10;    @Test&#10;    fun businessmanImplementsPerson() {&#10;        Assert.assertTrue(&quot;Businessman needs to be a person&quot;, Businessman(&quot;AAA&quot;, 30) is Person)&#10;    }&#10;&#10;    @Test&#10;    fun studentImplementsPerson() {&#10;        Assert.assertTrue(&quot;Student needs to be a person&quot;, Student(&quot;AAA&quot;, 30) is Person)&#10;    }&#10;&#10;    @Test&#10;    fun personCanBuyAlcoholIfOver21() {&#10;        Assert.assertTrue(&quot;Adult businessman can buy alcohol&quot;, Businessman(&quot;AAA&quot;, 30).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Adult businessman can buy alcohol&quot;, Businessman(&quot;AAA&quot;, 21).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young businessman can' buy alcohol&quot;, !Businessman(&quot;AAA&quot;, 19).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young businessman can' buy alcohol&quot;, !Businessman(&quot;AAA&quot;, 17).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Adult student can buy alcohol&quot;, Student(&quot;AAA&quot;, 30).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Adult student can buy alcohol&quot;, Student(&quot;AAA&quot;, 21).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young student can' buy alcohol&quot;, !Student(&quot;AAA&quot;, 19).canBuyAlcohol)&#10;        Assert.assertTrue(&quot;Young student can' buy alcohol&quot;, !Student(&quot;AAA&quot;, 17).canBuyAlcohol)&#10;    }&#10;&#10;    @Test&#10;    fun testBusinessmanHelloText() {&#10;        Assert.assertEquals(&quot;Good morning&quot;, Businessman(&quot;AAA&quot;, 30).helloText())&#10;    }&#10;&#10;    @Test&#10;    fun testStudentHelloText() {&#10;        Assert.assertEquals(&quot;Hi&quot;, Student(&quot;AAA&quot;, 30).helloText())&#10;    }&#10;&#10;    @Test&#10;    fun testStudentGreetText() {&#10;        val name1 = &quot;Some name&quot;&#10;        val name2 = &quot;Another name&quot;&#10;        val student = Student(name1, 12)&#10;        val businessman = Businessman(name2, 12)&#10;        Assert.assertEquals(&quot;Hey $name2, I am $name1&quot;, Student(name1, 30).cheerText(businessman))&#10;        Assert.assertEquals(&quot;Hey $name1, I am $name2&quot;, Student(name2, 30).cheerText(student))&#10;    }&#10;&#10;    @Test&#10;    fun testBusinessmanGreetText() {&#10;        val name1 = &quot;Some name&quot;&#10;        val name2 = &quot;Another name&quot;&#10;        val student = Student(name1, 12)&#10;        val businessman = Businessman(name2, 12)&#10;        Assert.assertEquals(&quot;Hello, my name is $name1, nice to see you $name2&quot;, Businessman(name1, 30).cheerText(businessman))&#10;        Assert.assertEquals(&quot;Hello, my name is $name2, nice to see you $name1&quot;, Businessman(name2, 30).cheerText(student))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996673000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Factory Methods&lt;/h1&gt;&#10;Make a factory method that can be used this way:&lt;br&gt;&#10;&lt;code&gt;val pizza = Pizza.hawaiian()&lt;/code&gt;&#10;&lt;br&gt;&lt;br&gt;&#10;It should produce a pizza with 1 cheese, ham and pineapple same as this one:&lt;br&gt;&#10;&lt;code&gt;Pizza(cheese = 1, pineapple = 1, ham = 1)&lt;/code&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651525" />
                            <option name="index" value="2" />
                            <option name="name" value="Pizza" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="data class Pizza(&#10;        val cheese: Int = 0,&#10;        val pineapple: Int = 0,&#10;        val ham: Int = 0,&#10;        val egg: Int = 0,&#10;        val spinach: Int = 0&#10;)&#10;&#10;fun main() {&#10;    val pizza = Pizza.hawaiian()&#10;    assert(pizza == Pizza(cheese = 1, pineapple = 1, ham = 1))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertTrue&#10;import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class PizzaTest {&#10;&#10;    @Test&#10;    fun pizzaCheck() {&#10;        assertTrue(Pizza.hawaiian() == Pizza(cheese = 1, pineapple = 1, ham = 1))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996674000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Update this &lt;code&gt;product&lt;/code&gt; function to make it accept list as an extension receiver instead of as a standard argument.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;You should allow this way the following use:&lt;br&gt;&#10;&lt;code&gt;print(listOf(1,2,3).product())&lt;/code&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651526" />
                            <option name="index" value="3" />
                            <option name="name" value="Product" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun product(iterable: Iterable&lt;Int&gt;): Int {&#10;    var prod = 1&#10;    for (i in iterable) {&#10;        prod *= i&#10;    }&#10;    return prod&#10;}&#10;&#10;fun main() {&#10;    print(listOf(1,2,3).product())&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class Test {&#10;&#10;    @Test&#10;    fun check() {&#10;        val prod = listOf(1,2,3,4,5).product()&#10;        assertEquals(120, prod)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996675000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Tree operations&lt;/h1&gt;&#10;Implement the following extension functions:&#10;&lt;ul&gt;&#10;  &lt;li&gt;&lt;code&gt;Tree.plus(Tree): Tree&lt;/code&gt; - Returning a new tree by making a node pointing to the receiver on the left, and to&#10;    the argument on the right.&lt;/li&gt;    &lt;li&gt;&lt;code&gt;Tree.count(): Int&lt;/code&gt; - Returning number of leafs in the tree.&lt;/li&gt;&#10;  &lt;li&gt;&lt;code&gt;Tree.height(): Int&lt;/code&gt; - Returning height of tree (longest size from root to a leaf including root).&lt;/li&gt;&#10;  &lt;li&gt;&lt;code&gt;Tree.contains(String): Boolean&lt;/code&gt; - Checking if any of the leafs in the tree contains an element equal (==) to&#10;    the one from argument.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651527" />
                            <option name="index" value="4" />
                            <option name="name" value="Tree operations" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="sealed class Tree&#10;data class Leaf(val value: String) : Tree()&#10;data class Node(val left: Tree, val right: Tree) : Tree()&#10;&#10;// Implement operations here&#10;&#10;fun main() {&#10;    val tree = Node(Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)), Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)))&#10;    println(Leaf(&quot;A&quot;).plus(Leaf(&quot;B&quot;))) // Node(left=Leaf(value=A), right=Leaf(value=B))&#10;    assert(Leaf(&quot;A&quot;).plus(Leaf(&quot;B&quot;)) == Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)))&#10;&#10;    println(Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)).plus(Leaf(&quot;C&quot;))) // Node(left=Node(left=Leaf(value=A), right=Leaf(value=B)), right=Leaf(value=C))&#10;    assert(Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)).plus(Leaf(&quot;C&quot;)) == Node(Node(Leaf(&quot;A&quot;), Leaf(&quot;B&quot;)), Leaf(&quot;C&quot;)))&#10;&#10;    println(tree.count()) // 6&#10;    println(tree.height()) // 4&#10;&#10;    println(tree.contains(&quot;AAA&quot;)) // true&#10;    println(tree.contains(&quot;DDD&quot;)) // false&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class TreeOperationsTest {&#10;    /*&#10;            root Node&#10;            /      \&#10;          Node     CCC&#10;         /    \&#10;       AAA    BBB&#10;     */&#10;    private val tree1 = Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;))&#10;&#10;    /*&#10;                    root Node&#10;                   /         \&#10;               Node           Node&#10;            /      \        /      \&#10;          Node     CCC    Node     CCC&#10;         /    \          /    \&#10;       AAA    BBB      AAA    BBB&#10;     */&#10;    private val tree2 =&#10;            Node(Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)), Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)))&#10;&#10;    /*&#10;                root Node&#10;                /     \&#10;              Node    DDD&#10;            /      \&#10;          Node     CCC&#10;         /    \&#10;       AAA    BBB&#10;     */&#10;    private val tree3 = Node(Node(Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)), Leaf(&quot;CCC&quot;)), Leaf(&quot;DDD&quot;))&#10;&#10;    @Test&#10;    fun `Count of a leaf is 1`() {&#10;        assertEquals(1, Leaf(&quot;AAA&quot;).count())&#10;    }&#10;&#10;    @Test&#10;    fun `Count of a single node with two leafs is 2`() {&#10;        assertEquals(2, Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)).count())&#10;    }&#10;&#10;    @Test&#10;    fun `Count returns number of leafs in the tree`() {&#10;        assertEquals(3, tree1.count())&#10;        assertEquals(6, tree2.count())&#10;        assertEquals(4, tree3.count())&#10;    }&#10;&#10;    @Test&#10;    fun `Size of a leaf is 1`() {&#10;        assertEquals(1, Leaf(&quot;AAA&quot;).height())&#10;    }&#10;&#10;    @Test&#10;    fun `Size of a single node with two leafs is 2`() {&#10;        assertEquals(2, Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;)).height())&#10;    }&#10;&#10;    @Test&#10;    // Every level in height is one more to the result&#10;    fun `Height returns the highest dustance from the root to a leaf`() {&#10;        assertEquals(3, tree1.height())&#10;        assertEquals(4, tree2.height())&#10;        assertEquals(4, tree3.height())&#10;    }&#10;&#10;    @Test&#10;    fun `Value of a leaf is in this leaf`() {&#10;        assertTrue(Leaf(&quot;AAA&quot;).contains(&quot;AAA&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Node with leafs contains values of its leafs`() {&#10;        val tree = Node(Leaf(&quot;AAA&quot;), Leaf(&quot;BBB&quot;))&#10;        assertTrue(tree.contains(&quot;AAA&quot;))&#10;        assertTrue(tree.contains(&quot;BBB&quot;))&#10;        assertTrue(!tree.contains(&quot;CCC&quot;))&#10;        assertTrue(!tree.contains(&quot;DDD&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Complex cases`() {&#10;        assertTrue(tree1.contains(&quot;AAA&quot;))&#10;        assertTrue(tree1.contains(&quot;BBB&quot;))&#10;        assertTrue(tree1.contains(&quot;CCC&quot;))&#10;        assertTrue(!tree1.contains(&quot;CCCC&quot;))&#10;        assertTrue(!tree1.contains(&quot;D&quot;))&#10;&#10;        assertTrue(tree2.contains(&quot;AAA&quot;))&#10;        assertTrue(tree2.contains(&quot;BBB&quot;))&#10;        assertTrue(tree2.contains(&quot;CCC&quot;))&#10;        assertTrue(!tree2.contains(&quot;CCCC&quot;))&#10;        assertTrue(!tree2.contains(&quot;D&quot;))&#10;&#10;&#10;        assertTrue(tree3.contains(&quot;AAA&quot;))&#10;        assertTrue(tree3.contains(&quot;BBB&quot;))&#10;        assertTrue(tree3.contains(&quot;CCC&quot;))&#10;        assertTrue(tree3.contains(&quot;DDD&quot;))&#10;        assertTrue(!tree3.contains(&quot;CCCC&quot;))&#10;        assertTrue(!tree3.contains(&quot;D&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Plus of two leafs test`() {&#10;        val tree = Leaf(&quot;AAA&quot;).plus(Leaf(&quot;BBB&quot;))&#10;        assertTrue(tree is Node)&#10;        val n = tree as Node&#10;        assertTrue(n.left == Leaf(&quot;AAA&quot;))&#10;        assertTrue(n.right == Leaf(&quot;BBB&quot;))&#10;    }&#10;&#10;    @Test&#10;    fun `Plus just places subtrees on the left and right side without copying them`() {&#10;        val tree = tree1.plus(tree2)&#10;        assertTrue(tree is Node)&#10;        val n = tree as Node&#10;        assertTrue(n.left === tree1)&#10;        assertTrue(n.right === tree2)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996676000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Tree Operations&lt;/h1&gt;&#10;Make + and * operators allowed for &lt;code&gt;RationalNumber&lt;/code&gt;:&#10;&lt;pre&gt;&lt;code&gt;&#10;r1 + r2&#10;r1 * r2&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  To allow operator overloading, you need correct signature (name, arguments and return type) and &lt;code&gt;operator&lt;/code&gt; modifier.&lt;br&gt;&#10;  + needs &lt;code&gt;plus&lt;/code&gt; method with a single receiver and single argument.&lt;br&gt;&#10;  * needs &lt;code&gt;times&lt;/code&gt; method with a single receiver and single argument.&#10;&lt;/div&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651528" />
                            <option name="index" value="5" />
                            <option name="name" value="Operators" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="data class RationalNumber(val numerator: Int, val denominator: Int)&#10;&#10;fun main() {&#10;    val r1 = RationalNumber(1,2)&#10;    val r2 = RationalNumber(1,3)&#10;&#10;    r1 + r2 == RationalNumber(2,3)&#10;    r1 * r2 == RationalNumber(1,6)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class OperationsTest {&#10;&#10;    @Test&#10;    fun check() {&#10;        val r1 = RationalNumber(1, 2)&#10;        val r2 = RationalNumber(1, 3)&#10;&#10;        assertTrue(r1 + r2 == RationalNumber(2, 3))&#10;        assertTrue(r1 * r2 == RationalNumber(1, 6))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996677000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <FrameworkLesson>
                      <option name="currentTaskIndex" value="0" />
                      <option name="customPresentableName" />
                      <option name="id" value="215387" />
                      <option name="index" value="5" />
                      <option name="name" value="Higher-order functions" />
                      <option name="updateDate" value="1552998936000" />
                      <option name="unitId" value="0" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Loop&lt;/h1&gt;&#10;Implement a &lt;code&gt;loop&lt;/code&gt; function that repeats an operation infinitely.&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;loop {&#10;    // This should be repeated infinitely&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650713" />
                            <option name="index" value="1" />
                            <option name="name" value="Loop" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="fun loop(operation: ()-&gt;Unit) {&#10;    while (true) {&#10;        operation()&#10;    }&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="TODO()&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    loop {&#10;        // This should be repeated infinitely&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926337000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Flat Map&lt;/h1&gt;&#10;&#10;Analyze how &lt;code&gt;onEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; are implemented.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Implement &lt;code&gt;flatMap&lt;/code&gt; yourself.&lt;code&gt;flatMap&lt;/code&gt; returns a single list of all elements yielded from results&#10;of transform function being invoked on each element of original array. Example:&#10;&lt;pre&gt;&lt;code&gt;&#10;val l = listOf(listOf(1,2), listOf(3,4))&#10;l.flatMap { it } == listOf(1,2,3,4)&#10;&#10;(1..5).flatMap { listOf(it, it + 10, it + 100) } == listOf(1, 11, 101, 2, 12, 102, 3, 13, 103, 4, 14, 104, 5, 15, 105)&#10;&#10;data class Worker(val name: String)&#10;data class Department(val workers: List&amp;lt;Worker&amp;gt;)&#10;val departments = listOf(&#10;    Department(listOf(Worker(&quot;Jack Black&quot;), Worker(&quot;James Roe&quot;))),&#10;    Department(listOf(Worker(&quot;Mick Kick&quot;), Worker(&quot;Johns Rones&quot;)))&#10;)&#10;&#10;val allWorkers = departments.flatMap { it.workers }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;br&gt;&#10;Import aliases at the top are there to prevent you from using stdlib collection processing functions.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650714" />
                            <option name="index" value="2" />
                            <option name="name" value="Flat Map" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="package collections&#10;&#10;// To prevent unintentional stdlib functions usage&#10;//import kotlin.collections.flatMap as stdlibFlatMap&#10;import kotlin.collections.forEach as stdlibForEach&#10;import kotlin.collections.map as stdlibMap&#10;import kotlin.collections.filter as stdlibFilter&#10;&#10;inline fun &lt;T&gt; Iterable&lt;T&gt;.onEach(operation: (T) -&gt; Unit): Iterable&lt;T&gt; {&#10;    for (elem in this) {&#10;        operation(elem)&#10;    }&#10;    return this&#10;}&#10;&#10;inline fun &lt;T, R&gt; Iterable&lt;T&gt;.map(transformation: (T) -&gt; R): List&lt;R&gt; {&#10;    val list = arrayListOf&lt;R&gt;()&#10;    for (elem in this) {&#10;        list.add(transformation(elem))&#10;    }&#10;    return list&#10;}&#10;&#10;inline fun &lt;T&gt; Iterable&lt;T&gt;.filter(predicate: (T) -&gt; Boolean): List&lt;T&gt; {&#10;    val list = arrayListOf&lt;T&gt;()&#10;    for (elem in this) {&#10;        if (predicate(elem)) {&#10;            list.add(elem)&#10;        }&#10;    }&#10;    return list&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    println((1..10).filter { it % 2 == 0 })&#10;    println((1..10).map { it * it })&#10;&#10;    (1..10).onEach { print(it) }&#10;    println()&#10;&#10;    println((1..5).flatMap { listOf(it, it + 10, it + 100) }) // [1, 11, 101, 2, 12, 102, 3, 13, 103, 4, 14, 104, 5, 15, 105]&#10;&#10;    data class Worker(val name: String)&#10;    data class Department(val workers: List&lt;Worker&gt;)&#10;    val departments = listOf(&#10;            Department(listOf(Worker(&quot;Jack Black&quot;), Worker(&quot;James Roe&quot;))),&#10;            Department(listOf(Worker(&quot;Mick Kick&quot;), Worker(&quot;Johns Rones&quot;)))&#10;    )&#10;&#10;    val allWorkers = departments.flatMap { it.workers }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926337000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Plus At&lt;/h1&gt;&#10;Read-only lists should also have a function to add an element at a concrete position.&#10;&lt;br&gt;&#10;Implement &lt;code&gt;plusAt&lt;/code&gt; that creates a new list with added element at set position.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650715" />
                            <option name="index" value="3" />
                            <option name="name" value="PlusAt" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun &lt;T&gt; List&lt;T&gt;.plusAt(index: Int, element: T): List&lt;T&gt; = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class PlusAtTests {&#10;&#10;    @Test&#10;    fun `Simple plusAt tests`() {&#10;        val list = listOf(1,2,3)&#10;        assertIsThrowingError { list.plusAt(-1, 100) }&#10;        assertIsThrowingError { list.plusAt(-100, 100) }&#10;        assertIsThrowingError { list.plusAt(1000, 100) }&#10;        Assert.assertEquals(listOf(100, 1, 2, 3), list.plusAt(0, 100))&#10;        Assert.assertEquals(listOf(1, 100, 2, 3), list.plusAt(1, 100))&#10;        Assert.assertEquals(listOf(1, 2, 3, 100), list.plusAt(3, 100))&#10;    }&#10;&#10;    private fun &lt;T&gt; assertIsThrowingError(f: () -&gt; T) {&#10;        try {&#10;            f()&#10;        } catch (r: Error) {&#10;            return&#10;        }&#10;        Assert.assertTrue(false)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926338000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Passing Students&lt;/h1&gt;&#10;Implement makePassingStudentsListText method to display a list of students who have got more than 15 points in the&#10;semester and a result of at least 50. Display in alphabetical order (surname then name), in the format: “{name}&#10;{surname}, {result}”&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650716" />
                            <option name="index" value="4" />
                            <option name="name" value="Passing Students" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="58" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="58" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="this&#10;        .filter { it.pointsInSemester &gt; 15 &amp;&amp; it.result &gt;= 50 }&#10;        .sortedWith(compareBy({ it.surname }, { it.name }))&#10;        .joinToString(separator = &quot;\n&quot;) {&#10;            &quot;${it.name} ${it.surname}, ${it.result}&quot;&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun List&lt;Student&gt;.makePassingStudentsListText(): String = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Students.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Students.kt" />
                                      <option name="text" value="data class Student(&#10;        val name: String,&#10;        val surname: String,&#10;        val result: Double,&#10;        val pointsInSemester: Int&#10;)&#10;&#10;abstract class StudentsTests() {&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertEquals&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class PlusAtTests {&#10;&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;&#10;    @Test&#10;    fun `Single student that matches criteria is displayed`() {&#10;        val text = listOf(internshipStudent).makePassingStudentsListText()&#10;        val expected = &quot;Marc Smith, 87.0&quot;&#10;        assertEquals(expected, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with too low result doesn't get internship`() {&#10;        val text = listOf(studentNotPassingBecauseOfResult).makePassingStudentsListText()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `15 points is not acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 81.0, 15)&#10;        val text = listOf(student).makePassingStudentsListText()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `result 50 points is acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 50.0, 25)&#10;        val text = listOf(student).makePassingStudentsListText()&#10;        assertEquals(&quot;Noely Peterson, 50.0&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with not enough doesn't get internship`() {&#10;        val text = listOf(studentNotPassingBecauseOfPoints).makePassingStudentsListText()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Complex test`() {&#10;        val text = allStudents.makePassingStudentsListText()&#10;        val expected = &quot;&quot;&quot;&#10;            Ester Adams, 81.0&#10;            Dior Angel, 88.5&#10;            Oregon Dart, 85.5&#10;            Jack Johnson, 85.3&#10;            James Johnson, 85.2&#10;            Jon Johnson, 85.1&#10;            Jamme Lannister, 80.0&#10;            Naja Marcson, 100.0&#10;            Alex Nolan, 86.0&#10;            Ron Peters, 89.0&#10;            Noe Peterson, 91.0&#10;            Noely Peterson, 91.0&#10;            Harry Potter, 80.0&#10;            Marc Smith, 87.0&#10;        &quot;&quot;&quot;.trimIndent()&#10;        assertEquals(expected, text)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926338000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Passing Students&lt;/h1&gt;&#10;Implement makeBestStudentsList method to display the best 10 students so they can get an internship. You should compare them by their result (higher is better). To get an internship, students need to have got at least 30 points in the semester and a result of at least 80. The best student gets \$5000, the next 3 get \$3000 and the next 6 get \$1000. Display students in alphabetical order (compare first surname then name) in the format “{name} {surname}, \${internship size}”&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650717" />
                            <option name="index" value="5" />
                            <option name="name" value="Best Students" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="51" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="51" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="this&#10;        .filter { it.pointsInSemester &gt;= 30 &amp;&amp; it.result &gt;= 80 }&#10;        .sortedByDescending { it.result }&#10;        .zip(internships)&#10;        .sortedWith(compareBy({ it.first.surname }, { it.first.name }))&#10;        .joinToString(separator = &quot;\n&quot;) { (s, i) -&gt; &quot;${s.name} ${s.surname}, \$$i&quot; }&#10;&#10;private val internships = List(1) { 5000 } + List(3) { 3000 } + List(6) { 1000 }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun List&lt;Student&gt;.makeBestStudentsList(): String = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Students.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Students.kt" />
                                      <option name="text" value="data class Student(&#10;        val name: String,&#10;        val surname: String,&#10;        val result: Double,&#10;        val pointsInSemester: Int&#10;)&#10;&#10;abstract class StudentsTests() {&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertEquals&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class PlusAtTests {&#10;&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;&#10;    @Test&#10;    fun `Single student that matches criteria gets biggest internship`() {&#10;        val text = listOf(internshipStudent).makeBestStudentsList()&#10;        val expected = &quot;Marc Smith, \$5000&quot;&#10;        assertEquals(expected, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with too low result doesn't get internship`() {&#10;        val text = listOf(studentWithTooLowResultToInternship).makeBestStudentsList()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Result 80 is acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 80.0, 32)&#10;        val text = listOf(student).makeBestStudentsList()&#10;        assertEquals(&quot;Noely Peterson, \$5000&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `30 points is acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 81.0, 30)&#10;        val text = listOf(student).makeBestStudentsList()&#10;        assertEquals(&quot;Noely Peterson, \$5000&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with not enough doesn't get internship`() {&#10;        val text = listOf(studentWithNotEnoughPointsForInternship).makeBestStudentsList()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Complex test`() {&#10;        val text = allStudents.makeBestStudentsList()&#10;        val expected = &quot;&quot;&quot;&#10;            Ester Adams, ${'$'}1000&#10;            Dior Angel, ${'$'}3000&#10;            Oregon Dart, ${'$'}1000&#10;            Jack Johnson, ${'$'}1000&#10;            James Johnson, ${'$'}1000&#10;            Jon Johnson, ${'$'}1000&#10;            Naja Marcson, ${'$'}5000&#10;            Alex Nolan, ${'$'}1000&#10;            Ron Peters, ${'$'}3000&#10;            Marc Smith, ${'$'}3000&#10;        &quot;&quot;&quot;.trimIndent()&#10;        assertEquals(expected, text)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926339000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Quick Sort&lt;/h1&gt;&#10;Quick sort should take first element (pivot), then split rest to bigger then pivot and smaller and finally return first smaller sorted, then pivot and finally bigger sorted&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650718" />
                            <option name="index" value="6" />
                            <option name="name" value="Quick Sort" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun &lt;T : Comparable&lt;T&gt;&gt; List&lt;T&gt;.quickSort(): List&lt;T&gt; {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertEquals&#10;import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.*&#10;&#10;class PlusAtTests {&#10;&#10;    @Test&#10;    fun `Empty list is sorted`() {&#10;        assertEquals(emptyList&lt;Int&gt;(), emptyList&lt;Int&gt;().quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Single element is sorted`() {&#10;        assertEquals(listOf(1), listOf(1).quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Simple numbers sorting`() {&#10;        assertEquals(listOf(1, 2, 3, 5, 6), listOf(3, 2, 5, 1, 6).quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Simple String sorting`() {&#10;        assertEquals(listOf(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;), listOf(&quot;C&quot;, &quot;D&quot;, &quot;A&quot;, &quot;B&quot;).quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Random list sorting should give the same result as when we use stdlib sorted function`() {&#10;        val rand = Random(244252)&#10;        val listOfRandomLists = (1..100).map { _ -&gt; (1..100).map { rand.nextInt() } }&#10;        for (list: List&lt;Int&gt; in listOfRandomLists) {&#10;            assertEquals(list.sorted(), list.quickSort())&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926340000" />
                          </EduTask>
                        </list>
                      </option>
                    </FrameworkLesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="215695" />
                      <option name="index" value="6" />
                      <option name="name" value="Functional" />
                      <option name="updateDate" value="1553196730000" />
                      <option name="unitId" value="188702" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Repeat&lt;/h1&gt;&#10;Implement &lt;code&gt;repeat&lt;/code&gt; function that repeats an operation set amount of times.&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;repeat(5) {&#10;    // This should be repeated 5 times&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651557" />
                            <option name="index" value="1" />
                            <option name="name" value="Repeat" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="45" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="45" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="    for(i in 1..times) {&#10;        action()&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun repeat(times: Int, action: () -&gt; Unit) {&#10;TODO()&#10;}&#10;&#10;fun main() {&#10;    repeat(5) { print(&quot;A&quot;) } // AAAAA&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import kotlin.repeat as `Implement it yourself`&#10;&#10;class Test {&#10;&#10;    @Test&#10;    fun add3Str() {&#10;        var str = &quot;&quot;&#10;        repeat(3) { str += &quot;A&quot; }&#10;        Assert.assertEquals(&quot;AAA&quot;, str)&#10;    }&#10;&#10;    @Test&#10;    fun add3Int() {&#10;        var i = 0&#10;        repeat(3) { i++ }&#10;        Assert.assertEquals(3, i)&#10;    }&#10;&#10;    @Test&#10;    fun add0Int() {&#10;        var i = 0&#10;        repeat(0) { i++ }&#10;        Assert.assertEquals(0, i)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552998077000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Loop&lt;/h1&gt;&#10;Implement &lt;code&gt;loop&lt;/code&gt; function that repeats an operation infinitely.&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;loop {&#10;    // This should be repeated infinitely&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651558" />
                            <option name="index" value="2" />
                            <option name="name" value="Loop" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="9" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="9" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="type here" />
                                            <option name="possibleAnswer" value="fun loop(operation: ()-&gt;Unit) {&#10;    while (true) operation()&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="type here&#10;&#10;fun main() {&#10;    loop {&#10;        // This should be repeated infinitely&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        var i = 0&#10;        var success = false&#10;        try {&#10;            loop {&#10;                i++&#10;                if (i == 1000) throw E()&#10;            }&#10;        } catch (e: E) {&#10;            success = i == 1000&#10;        }&#10;        Assert.assertTrue(success)&#10;    }&#10;&#10;    class E: Throwable()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552998078000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Flat Map&lt;/h1&gt;&#10;&#10;Analyze how &lt;code&gt;onEach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; are implemented.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;Implement &lt;code&gt;flatMap&lt;/code&gt; yourself.&lt;code&gt;flatMap&lt;/code&gt; returns a single list of all elements yielded from results&#10;of transform function being invoked on each element of original array. Example:&#10;&lt;pre&gt;&lt;code&gt;&#10;val l = listOf(listOf(1,2), listOf(3,4))&#10;l.flatMap { it } == listOf(1,2,3,4)&#10;&#10;(1..5).flatMap { listOf(it, it + 10, it + 100) } == listOf(1, 11, 101, 2, 12, 102, 3, 13, 103, 4, 14, 104, 5, 15, 105)&#10;&#10;data class Worker(val name: String)&#10;data class Department(val workers: List&amp;lt;Worker&amp;gt;)&#10;val departments = listOf(&#10;    Department(listOf(Worker(&quot;Jack Black&quot;), Worker(&quot;James Roe&quot;))),&#10;    Department(listOf(Worker(&quot;Mick Kick&quot;), Worker(&quot;Johns Rones&quot;)))&#10;)&#10;&#10;val allWorkers = departments.flatMap { it.workers }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;br&gt;&#10;Import aliases at the top are there to prevent you from using stdlib collection processing functions.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651523" />
                            <option name="index" value="3" />
                            <option name="name" value="Flat Map" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="20" />
                                                <option name="offset" value="807" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="20" />
                                            <option name="offset" value="807" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="// Implement flatMap" />
                                            <option name="possibleAnswer" value="inline fun &lt;T, R&gt; Iterable&lt;T&gt;.flatMap(transformation: (T) -&gt; Iterable&lt;R&gt;): List&lt;R&gt; {&#10;    val list = arrayListOf&lt;R&gt;()&#10;    for (elem in this) {&#10;        list.addAll(transformation(elem))&#10;    }&#10;    return list&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="// To prevent unintentional stdlib functions usage&#10;import kotlin.collections.flatMap as stdlibFlatMap&#10;import kotlin.collections.forEach as stdlibForEach&#10;import kotlin.collections.map as stdlibMap&#10;import kotlin.collections.filter as stdlibFilter&#10;&#10;inline fun &lt;T&gt; Iterable&lt;T&gt;.onEach(operation: (T) -&gt; Unit): Iterable&lt;T&gt; {&#10;    for (elem in this) {&#10;        operation(elem)&#10;    }&#10;    return this&#10;}&#10;&#10;inline fun &lt;T, R&gt; Iterable&lt;T&gt;.map(transformation: (T) -&gt; R): List&lt;R&gt; {&#10;    val list = arrayListOf&lt;R&gt;()&#10;    for (elem in this) {&#10;        list.add(transformation(elem))&#10;    }&#10;    return list&#10;}&#10;&#10;inline fun &lt;T&gt; Iterable&lt;T&gt;.filter(predicate: (T) -&gt; Boolean): List&lt;T&gt; {&#10;    val list = arrayListOf&lt;T&gt;()&#10;    for (elem in this) {&#10;        if (predicate(elem)) {&#10;            list.add(elem)&#10;        }&#10;    }&#10;    return list&#10;}&#10;&#10;// Implement flatMap&#10;&#10;fun main() {&#10;    println((1..10).filter { it % 2 == 0 })&#10;    println((1..10).map { it * it })&#10;&#10;    (1..10).onEach { print(it) }&#10;    println()&#10;&#10;    println((1..5).flatMap { listOf(it, it + 10, it + 100) }) // [1, 11, 101, 2, 12, 102, 3, 13, 103, 4, 14, 104, 5, 15, 105]&#10;&#10;    data class Worker(val name: String)&#10;    data class Department(val workers: List&lt;Worker&gt;)&#10;    val departments = listOf(&#10;            Department(listOf(Worker(&quot;Jack Black&quot;), Worker(&quot;James Roe&quot;))),&#10;            Department(listOf(Worker(&quot;Mick Kick&quot;), Worker(&quot;Johns Rones&quot;)))&#10;    )&#10;&#10;    val allWorkers = departments.flatMap { it.workers }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.TestCase.assertEquals&#10;import org.junit.Test&#10;import kotlin.collections.listOf&#10;import kotlin.collections.flatMap as stdlibFlatMap&#10;&#10;class FlatMapTest {&#10;    @Test&#10;    fun check() {&#10;        assertEquals(listOf(1, 11, 2, 12, 3, 13, 4, 14), (1..4).flatMap { listOf(it, it + 10) })&#10;&#10;        val listOfLists = listOf(listOf(1,2,3), listOf(), listOf(4,5,6))&#10;        assertEquals(listOf(1,2,3,4,5,6), listOfLists.flatMap { it })&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1553196730000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Plus At&lt;/h1&gt;&#10;Read-only lists should also have a function to add an element at a concrete position.&#10;&lt;br&gt;&#10;Implement &lt;code&gt;plusAt&lt;/code&gt; that creates a new list with added element at set position.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651519" />
                            <option name="index" value="4" />
                            <option name="name" value="Plus At" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="62" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="62" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="require(index in 0..size)&#10;    return this.take(index) + element + this.drop(index)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun &lt;T&gt; List&lt;T&gt;.plusAt(index: Int, element: T): List&lt;T&gt; {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import java.lang.IllegalArgumentException&#10;&#10;class PlusAtTests {&#10;&#10;    @Test&#10;    fun `Simple plusAt tests`() {&#10;        val list = listOf(1,2,3)&#10;        assertIsThrowingIAE { list.plusAt(-1, 100) }&#10;        assertIsThrowingIAE { list.plusAt(-100, 100) }&#10;        assertIsThrowingIAE { list.plusAt(1000, 100) }&#10;        Assert.assertEquals(listOf(100, 1, 2, 3), list.plusAt(0, 100))&#10;        Assert.assertEquals(listOf(1, 100, 2, 3), list.plusAt(1, 100))&#10;        Assert.assertEquals(listOf(1, 2, 3, 100), list.plusAt(3, 100))&#10;    }&#10;&#10;    private fun &lt;T&gt; assertIsThrowingIAE(f: () -&gt; T) {&#10;        try {&#10;            f()&#10;        } catch (r: IllegalArgumentException) {&#10;            return&#10;        }&#10;        Assert.assertTrue(false)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552998080000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;Write your task text here.&#10;&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div class=&quot;hint&quot;&gt;&#10;  You can add hints anywhere in task text. Copy all hint div block and change its content.&#10;&lt;/div&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651520" />
                            <option name="index" value="5" />
                            <option name="name" value="Passing Students" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Students.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Students.kt" />
                                      <option name="text" value="data class Student(&#10;        val name: String,&#10;        val surname: String,&#10;        val result: Double,&#10;        val pointsInSemester: Int&#10;)&#10;&#10;abstract class StudentsTests() {&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="58" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="58" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="this&#10;        .filter { it.pointsInSemester &gt; 15 &amp;&amp; it.result &gt;= 50 }&#10;        .sortedWith(compareBy({ it.surname }, { it.name }))&#10;        .joinToString(separator = &quot;\n&quot;) {&#10;            &quot;${it.name} ${it.surname}, ${it.result}&quot;&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun List&lt;Student&gt;.makePassingStudentsListText(): String = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertEquals&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class PlusAtTests {&#10;&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;&#10;    @Test&#10;    fun `Single student that matches criteria is displayed`() {&#10;        val text = listOf(internshipStudent).makePassingStudentsListText()&#10;        val expected = &quot;Marc Smith, 87.0&quot;&#10;        assertEquals(expected, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with too low result doesn't get internship`() {&#10;        val text = listOf(studentNotPassingBecauseOfResult).makePassingStudentsListText()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `15 points is not acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 81.0, 15)&#10;        val text = listOf(student).makePassingStudentsListText()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `result 50 points is acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 50.0, 25)&#10;        val text = listOf(student).makePassingStudentsListText()&#10;        assertEquals(&quot;Noely Peterson, 50.0&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with not enough doesn't get internship`() {&#10;        val text = listOf(studentNotPassingBecauseOfPoints).makePassingStudentsListText()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Complex test`() {&#10;        val text = allStudents.makePassingStudentsListText()&#10;        val expected = &quot;&quot;&quot;&#10;            Ester Adams, 81.0&#10;            Dior Angel, 88.5&#10;            Oregon Dart, 85.5&#10;            Jack Johnson, 85.3&#10;            James Johnson, 85.2&#10;            Jon Johnson, 85.1&#10;            Jamme Lannister, 80.0&#10;            Naja Marcson, 100.0&#10;            Alex Nolan, 86.0&#10;            Ron Peters, 89.0&#10;            Noe Peterson, 91.0&#10;            Noely Peterson, 91.0&#10;            Harry Potter, 80.0&#10;            Marc Smith, 87.0&#10;        &quot;&quot;&quot;.trimIndent()&#10;        assertEquals(expected, text)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552998080000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Passing Students&lt;/h1&gt;&#10;Implement makeBestStudentsList method to display the best 10 students so they can get an internship. You should compare them by their result (higher is better). To get an internship, students need to have got at least 30 points in the semester and a result of at least 80. The best student gets \$5000, the next 3 get \$3000 and the next 6 get \$1000. Display students in alphabetical order (compare first surname then name) in the format “{name} {surname}, \${internship size}”&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651521" />
                            <option name="index" value="6" />
                            <option name="name" value="Best Students" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Students.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Students.kt" />
                                      <option name="text" value="data class Student(&#10;        val name: String,&#10;        val surname: String,&#10;        val result: Double,&#10;        val pointsInSemester: Int&#10;)&#10;&#10;abstract class StudentsTests() {&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="51" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="51" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="this&#10;        .filter { it.pointsInSemester &gt;= 30 &amp;&amp; it.result &gt;= 80 }&#10;        .sortedByDescending { it.result }&#10;        .zip(internships)&#10;        .sortedWith(compareBy({ it.first.surname }, { it.first.name }))&#10;        .joinToString(separator = &quot;\n&quot;) { (s, i) -&gt; &quot;${s.name} ${s.surname}, \$$i&quot; }&#10;&#10;private val internships = List(1) { 5000 } + List(3) { 3000 } + List(6) { 1000 }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun List&lt;Student&gt;.makeBestStudentsList(): String = TODO()" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertEquals&#10;import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class PlusAtTests {&#10;&#10;    val internshipStudent = Student(&quot;Marc&quot;, &quot;Smith&quot;, 87.0, 32)&#10;    val studentWithTooLowResultToInternship = Student(&quot;Marcus&quot;, &quot;Smith&quot;, 37.0, 32)&#10;    val studentWithNotEnoughPointsForInternship = Student(&quot;Marcello&quot;, &quot;Smith&quot;, 87.0, 12)&#10;    val studentNotPassingBecauseOfResult = Student(&quot;Peter&quot;, &quot;Jackson&quot;, 21.0, 24)&#10;    val studentNotPassingBecauseOfPoints = Student(&quot;Michael&quot;, &quot;Angelo&quot;, 71.0, 12)&#10;&#10;    val allStudents = listOf(&#10;            internshipStudent,&#10;            studentWithTooLowResultToInternship,&#10;            studentWithNotEnoughPointsForInternship,&#10;            studentNotPassingBecauseOfResult,&#10;            Student(&quot;Noely&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            studentNotPassingBecauseOfPoints,&#10;            Student(&quot;Noe&quot;, &quot;Samson&quot;, 41.0, 18),&#10;            Student(&quot;Timothy&quot;, &quot;Johnson&quot;, 51.0, 15),&#10;            Student(&quot;Noe&quot;, &quot;Peterson&quot;, 91.0, 22),&#10;            Student(&quot;Ester&quot;, &quot;Adams&quot;, 81.0, 30),&#10;            Student(&quot;Dior&quot;, &quot;Angel&quot;, 88.5, 38),&#10;            Student(&quot;Naja&quot;, &quot;Marcson&quot;, 100.0, 31),&#10;            Student(&quot;Oregon&quot;, &quot;Dart&quot;, 85.5, 30),&#10;            Student(&quot;Ron&quot;, &quot;Peters&quot;, 89.0, 31),&#10;            Student(&quot;Harry&quot;, &quot;Potter&quot;, 80.0, 30),&#10;            Student(&quot;Sansa&quot;, &quot;Stark&quot;, 49.5, 14),&#10;            Student(&quot;Jamme&quot;, &quot;Lannister&quot;, 80.0, 30),&#10;            Student(&quot;Alex&quot;, &quot;Nolan&quot;, 86.0, 33),&#10;            Student(&quot;Jon&quot;, &quot;Johnson&quot;, 85.1, 31),&#10;            Student(&quot;James&quot;, &quot;Johnson&quot;, 85.2, 31),&#10;            Student(&quot;Jack&quot;, &quot;Johnson&quot;, 85.3, 31)&#10;    )&#10;&#10;    @Test&#10;    fun `Single student that matches criteria gets biggest internship`() {&#10;        val text = listOf(internshipStudent).makeBestStudentsList()&#10;        val expected = &quot;Marc Smith, \$5000&quot;&#10;        assertEquals(expected, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with too low result doesn't get internship`() {&#10;        val text = listOf(studentWithTooLowResultToInternship).makeBestStudentsList()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Result 80 is acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 80.0, 32)&#10;        val text = listOf(student).makeBestStudentsList()&#10;        assertEquals(&quot;Noely Peterson, \$5000&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `30 points is acceptable`() {&#10;        val student = Student(&quot;Noely&quot;, &quot;Peterson&quot;, 81.0, 30)&#10;        val text = listOf(student).makeBestStudentsList()&#10;        assertEquals(&quot;Noely Peterson, \$5000&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Single student with not enough doesn't get internship`() {&#10;        val text = listOf(studentWithNotEnoughPointsForInternship).makeBestStudentsList()&#10;        assertEquals(&quot;&quot;, text)&#10;    }&#10;&#10;    @Test&#10;    fun `Complex test`() {&#10;        val text = allStudents.makeBestStudentsList()&#10;        val expected = &quot;&quot;&quot;&#10;            Ester Adams, ${'$'}1000&#10;            Dior Angel, ${'$'}3000&#10;            Oregon Dart, ${'$'}1000&#10;            Jack Johnson, ${'$'}1000&#10;            James Johnson, ${'$'}1000&#10;            Jon Johnson, ${'$'}1000&#10;            Naja Marcson, ${'$'}5000&#10;            Alex Nolan, ${'$'}1000&#10;            Ron Peters, ${'$'}3000&#10;            Marc Smith, ${'$'}3000&#10;        &quot;&quot;&quot;.trimIndent()&#10;        assertEquals(expected, text)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552998081000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Quick Sort&lt;/h1&gt;&#10;Quick sort should take first element (pivot), then split rest to bigger then pivot and smaller and finally return first smaller sorted, then pivot and finally bigger sorted&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651522" />
                            <option name="index" value="7" />
                            <option name="name" value="Quick Sort" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun &lt;T : Comparable&lt;T&gt;&gt; List&lt;T&gt;.quickSort(): List&lt;T&gt; {&#10;    TODO()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.Assert.assertEquals&#10;import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.*&#10;&#10;class PlusAtTests {&#10;&#10;    @Test&#10;    fun `Empty list is sorted`() {&#10;        assertEquals(emptyList&lt;Int&gt;(), emptyList&lt;Int&gt;().quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Single element is sorted`() {&#10;        assertEquals(listOf(1), listOf(1).quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Simple numbers sorting`() {&#10;        assertEquals(listOf(1, 2, 3, 5, 6), listOf(3, 2, 5, 1, 6).quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Simple String sorting`() {&#10;        assertEquals(listOf(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;), listOf(&quot;C&quot;, &quot;D&quot;, &quot;A&quot;, &quot;B&quot;).quickSort())&#10;    }&#10;&#10;    @Test&#10;    fun `Random list sorting should give the same result as when we use stdlib sorted function`() {&#10;        val rand = Random(244252)&#10;        val listOfRandomLists = (1..100).map { _ -&gt; (1..100).map { rand.nextInt() } }&#10;        for (list: List&lt;Int&gt; in listOfRandomLists) {&#10;            assertEquals(list.sorted(), list.quickSort())&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552998082000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="215388" />
                      <option name="index" value="7" />
                      <option name="name" value="Generics" />
                      <option name="updateDate" value="1553196727000" />
                      <option name="unitId" value="188469" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h2&gt;Generic functions&lt;/h2&gt;&#10;&lt;p&gt;Make the following code compile by implementing a &lt;code&gt;partitionTo&lt;/code&gt; function that splits a collection into two collections according to the predicate.&lt;/p&gt;&#10;&lt;p&gt;There is a &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/partition.html&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;code&gt;partition()&lt;/code&gt;&lt;/a&gt; function in the standard library that always returns two newly created lists. You should write a function that splits the collection into two collections given as arguments. The signature of the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/kotlin.-iterable/to-collection.html&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;code&gt;toCollection()&lt;/code&gt;&lt;/a&gt;  function from the standard library may help you.&lt;/p&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650719" />
                            <option name="index" value="1" />
                            <option name="name" value="Generic functions" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;import java.util.ArrayList&#10;import java.util.HashSet&#10;&#10;class Test {&#10;    @Test fun testPartitionWordsAndLines() {&#10;        partitionWordsAndLines()&#10;&#10;        val (words, lines) = listOf(&quot;a&quot;, &quot;a b&quot;, &quot;c&quot;, &quot;d e&quot;).&#10;                partitionTo(ArrayList&lt;String&gt;(), ArrayList()) { s -&gt; !s.contains(&quot; &quot;) }&#10;        Assert.assertEquals(listOf(&quot;a&quot;, &quot;c&quot;), words)&#10;        Assert.assertEquals(listOf(&quot;a b&quot;, &quot;d e&quot;), lines)&#10;    }&#10;&#10;    @Test fun testPartitionLettersAndOtherSymbols() {&#10;        partitionLettersAndOtherSymbols()&#10;&#10;        val (letters, other) = setOf('a', '%', 'r', '}').&#10;                partitionTo(HashSet&lt;Char&gt;(), HashSet()) { c -&gt; c in 'a'..'z' || c in 'A'..'Z'}&#10;        Assert.assertEquals(setOf('a', 'r'), letters)&#10;        Assert.assertEquals(setOf('%', '}'), other)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="26" />
                                                <option name="offset" value="20" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="26" />
                                            <option name="offset" value="20" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="fun partitionTo() = TODO()" />
                                            <option name="possibleAnswer" value="fun &lt;T, C: MutableCollection&lt;T&gt;&gt; Collection&lt;T&gt;.partitionTo(first: C, second: C, predicate: (T) -&gt; Boolean): Pair&lt;C, C&gt; {&#10;    for (element in this) {&#10;        if (predicate(element)) {&#10;            first.add(element)&#10;        } else {&#10;            second.add(element)&#10;        }&#10;    }&#10;    return Pair(first, second)&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="import java.util.*&#10;&#10;fun partitionTo() = TODO()&#10;&#10;fun partitionWordsAndLines() {&#10;    val (words, lines) = listOf(&quot;a&quot;, &quot;a b&quot;, &quot;c&quot;, &quot;d e&quot;).&#10;            partitionTo(ArrayList&lt;String&gt;(), ArrayList()) { s -&gt; !s.contains(&quot; &quot;) }&#10;    words == listOf(&quot;a&quot;, &quot;c&quot;)&#10;    lines == listOf(&quot;a b&quot;, &quot;d e&quot;)&#10;}&#10;&#10;fun partitionLettersAndOtherSymbols() {&#10;    val (letters, other) = setOf('a', '%', 'r', '}').&#10;            partitionTo(HashSet&lt;Char&gt;(), HashSet()) { c -&gt; c in 'a'..'z' || c in 'A'..'Z'}&#10;    letters == setOf('a', 'r')&#10;    other == setOf('%', '}')&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926341000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Response&lt;/h1&gt;&#10;Allow the following notation using variance modifiers:&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;fun answer(resp: Response&amp;lt;Any, Throwable&amp;gt;) {}&#10;val resp = Success(&quot;Hurra&quot;)&#10;answer(resp)&#10;val error = ErrorResponse(Error())&#10;answer(error)&#10;&#10;val rs1 = Success(1)&#10;val re1 = ErrorResponse(Error())&#10;val re2 = ErrorResponse(&quot;Error&quot;)&#10;&#10;val rs1asNumber: Success&amp;lt;Number&amp;gt; = rs1&#10;val rs1asAny: Success&amp;lt;Any&amp;gt; = rs1&#10;&#10;val re1asThrowable: ErrorResponse&amp;lt;Throwable&amp;gt; = re1&#10;val re1asAny: ErrorResponse&amp;lt;Any&amp;gt; = re1&#10;&#10;val r1: Response&amp;lt;Int, Error&amp;gt; = rs1&#10;val r2: Response&amp;lt;Int, Error&amp;gt; = re1&#10;&#10;val r3: Response&amp;lt;Int, String&amp;gt; = rs1&#10;val r4: Response&amp;lt;Int, String&amp;gt; = re2&#10;&#10;val r5: Response&amp;lt;Any, Throwable&amp;gt; = rs1&#10;val r6: Response&amp;lt;Any, Throwable&amp;gt; = re1&#10;&#10;val s = Success(String())&#10;val s1: Success&amp;lt;CharSequence&amp;gt; = s&#10;val s2: Success&amp;lt;Any&amp;gt; = s&#10;&#10;val e = ErrorResponse(Error())&#10;val e1: ErrorResponse&amp;lt;Throwable&amp;gt; = e&#10;val e2: ErrorResponse&amp;lt;Any&amp;gt; = e&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650720" />
                            <option name="index" value="2" />
                            <option name="name" value="Response" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="sealed class Response&lt;R, E&gt;&#10;class Success&lt;R, E&gt;(val value: R): Response&lt;R, E&gt;()&#10;class ErrorResponse&lt;R, E&gt;(val error: E): Response&lt;R, E&gt;()&#10;&#10;fun main() {&#10;    fun answer(resp: Response&lt;Any, Throwable&gt;) {}&#10;    val resp = Success(&quot;Hurra&quot;)&#10;    answer(resp)&#10;    val error = ErrorResponse(Error())&#10;    answer(error)&#10;&#10;    val rs1 = Success(1)&#10;    val re1 = ErrorResponse(Error())&#10;    val re2 = ErrorResponse(&quot;Error&quot;)&#10;&#10;    val rs1asNumber: Success&lt;Number&gt; = rs1&#10;    val rs1asAny: Success&lt;Any&gt; = rs1&#10;&#10;    val re1asThrowable: ErrorResponse&lt;Throwable&gt; = re1&#10;    val re1asAny: ErrorResponse&lt;Any&gt; = re1&#10;&#10;    val r1: Response&lt;Int, Error&gt; = rs1&#10;    val r2: Response&lt;Int, Error&gt; = re1&#10;&#10;    val r3: Response&lt;Int, String&gt; = rs1&#10;    val r4: Response&lt;Int, String&gt; = re2&#10;&#10;    val r5: Response&lt;Any, Throwable&gt; = rs1&#10;    val r6: Response&lt;Any, Throwable&gt; = re1&#10;&#10;    val s = Success(String())&#10;    val s1: Success&lt;CharSequence&gt; = s&#10;    val s2: Success&lt;Any&gt; = s&#10;&#10;    val e = ErrorResponse(Error())&#10;    val e1: ErrorResponse&lt;Throwable&gt; = e&#10;    val e2: ErrorResponse&lt;Any&gt; = e&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        fun answer(resp: Response&lt;Any, Throwable&gt;) {}&#10;        val resp = Success(&quot;Hurra&quot;)&#10;        answer(resp)&#10;        val error = ErrorResponse(Error())&#10;        answer(error)&#10;&#10;        val rs1 = Success(1)&#10;        val re1 = ErrorResponse(Error())&#10;        val re2 = ErrorResponse(&quot;Error&quot;)&#10;&#10;        val rs1asNumber: Success&lt;Number&gt; = rs1&#10;        val rs1asAny: Success&lt;Any&gt; = rs1&#10;&#10;        val re1asThrowable: ErrorResponse&lt;Throwable&gt; = re1&#10;        val re1asAny: ErrorResponse&lt;Any&gt; = re1&#10;&#10;        val r1: Response&lt;Int, Error&gt; = rs1&#10;        val r2: Response&lt;Int, Error&gt; = re1&#10;&#10;        val r3: Response&lt;Int, String&gt; = rs1&#10;        val r4: Response&lt;Int, String&gt; = re2&#10;&#10;        val r5: Response&lt;Any, Throwable&gt; = rs1&#10;        val r6: Response&lt;Any, Throwable&gt; = re1&#10;&#10;        val s = Success(String())&#10;        val s1: Success&lt;CharSequence&gt; = s&#10;        val s2: Success&lt;Any&gt; = s&#10;&#10;        val e = ErrorResponse(Error())&#10;        val e1: ErrorResponse&lt;Throwable&gt; = e&#10;        val e2: ErrorResponse&lt;Any&gt; = e&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926342000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Consumer&lt;/h1&gt;&#10;Allow the following notation using variance modifiers:&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;val c1: Consumer&amp;lt;Int&amp;gt; = Printer&amp;lt;Number&amp;gt;()&#10;val c2: Consumer&amp;lt;Int&amp;gt; = Scanner&amp;lt;Number&amp;gt;()&#10;val c3: Printer&amp;lt;Int&amp;gt; = Printer&amp;lt;Number&amp;gt;()&#10;val c4: Scanner&amp;lt;Int&amp;gt; = Scanner&amp;lt;Number&amp;gt;()&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650721" />
                            <option name="index" value="3" />
                            <option name="name" value="Consumer" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="&#10;sealed class Consumer&lt;T&gt; {&#10;    abstract fun consume(elem: T)&#10;}&#10;&#10;class Printer&lt;T&gt;: Consumer&lt;T&gt;() {&#10;    private var toPrint: T? = null&#10;&#10;    fun print() {&#10;        println(&quot;Printing $toPrint&quot;)&#10;    }&#10;&#10;    override fun consume(elem: T) {&#10;        toPrint = elem&#10;    }&#10;}&#10;&#10;class Scanner&lt;T&gt;: Consumer&lt;T&gt;() {&#10;    private var toScan: T? = null&#10;&#10;    fun scan() {&#10;        println(&quot;Scanning $toScan&quot;)&#10;    }&#10;&#10;    override fun consume(elem: T) {&#10;        toScan = elem&#10;    }&#10;}&#10;&#10;fun getConsumer(): Consumer&lt;Number&gt; = Printer()&#10;&#10;fun main() {&#10;    val consumer = getConsumer()&#10;    consumer.consume(10)&#10;&#10;    when(consumer) {&#10;        is Printer -&gt; consumer.print()&#10;        is Scanner -&gt; consumer.scan()&#10;    }&#10;&#10;    // TODO: I want consumer to accept below declarations&#10;//    val c1: Consumer&lt;Int&gt; = Printer&lt;Number&gt;()&#10;//    val c2: Consumer&lt;Int&gt; = Scanner&lt;Number&gt;()&#10;//    val c3: Printer&lt;Int&gt; = Printer&lt;Number&gt;()&#10;//    val c4: Scanner&lt;Int&gt; = Scanner&lt;Number&gt;()&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        val c1: Consumer&lt;Int&gt; = Printer&lt;Number&gt;()&#10;        val c2: Consumer&lt;Int&gt; = Scanner&lt;Number&gt;()&#10;        val c3: Printer&lt;Int&gt; = Printer&lt;Number&gt;()&#10;        val c4: Scanner&lt;Int&gt; = Scanner&lt;Number&gt;()&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926342000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <FrameworkLesson>
                      <option name="currentTaskIndex" value="0" />
                      <option name="customPresentableName" />
                      <option name="id" value="215389" />
                      <option name="index" value="8" />
                      <option name="name" value="Delegates &amp; Builders" />
                      <option name="updateDate" value="1553196730000" />
                      <option name="unitId" value="0" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Mutable Lazy&lt;/h1&gt;&#10;Implement &lt;code&gt;mutableLazy&lt;/code&gt; delegate that works like a lazy, but value can be changed.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650722" />
                            <option name="index" value="1" />
                            <option name="name" value="MutableLazy" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="148" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="148" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="MutableLazy(initializer)&#10;&#10;private class MutableLazy&lt;T&gt;(val initializer: () -&gt; T) : ReadWriteProperty&lt;Any?, T&gt; {&#10;&#10;    private var value: T? = null&#10;    private var initialized = false&#10;&#10;    override fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): T {&#10;        synchronized(this) {&#10;            if (!initialized) {&#10;                value = initializer()&#10;                initialized = true&#10;            }&#10;            return value as T&#10;        }&#10;    }&#10;&#10;    override fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: T) {&#10;        synchronized(this) {&#10;            this.value = value&#10;            initialized = true&#10;        }&#10;    }&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="import kotlin.properties.ReadWriteProperty&#10;import kotlin.reflect.KProperty&#10;&#10;fun &lt;T&gt; mutableLazy(initializer: () -&gt; T): ReadWriteProperty&lt;Any?, T&gt; = TODO()&#10;&#10;fun main() {&#10;    var elem by mutableLazy { &quot;AAA&quot; }&#10;    print(elem) // AAA&#10;    elem = &quot;BBB&quot;&#10;    print(elem) // BBB&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Test&#10;import kotlin.system.measureTimeMillis&#10;&#10;class Test {&#10;    @Test&#10;    fun `I don't have to wait if I changed value first`() {&#10;        val time = measureTimeMillis {&#10;            var game: Game? by mutableLazy { readGameFromSave() }&#10;            game = Game()&#10;            game&#10;        }&#10;        assert(time in 0..100)&#10;    }&#10;&#10;    @Test&#10;    fun `I have to wait if I changed value first`() {&#10;        val time = measureTimeMillis {&#10;            val game: Game? by mutableLazy { readGameFromSave() }&#10;            game&#10;        }&#10;        assert(time in 450..550)&#10;    }&#10;&#10;    @Test&#10;    fun `The same object is returned every time`() {&#10;        val game by mutableLazy { object {} }&#10;        assert(game === game)&#10;    }&#10;&#10;    private class Game()&#10;&#10;    private fun readGameFromSave(): Game? {&#10;        Thread.sleep(500)&#10;        return Game()&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552926343000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Last Run&lt;/h1&gt;&#10;&#10;You need a way to stop your loop. Add a method &lt;code&gt;lastRun&lt;/code&gt; that can be used only inside &lt;code&gt;loop&lt;/code&gt;.&#10;It should not start next run after this one. For instance:&#10;&lt;pre&gt;&lt;code&gt;&#10;loop {&#10;  if(it == 8L) lastRun()&#10;  print(it)&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;Should print: 012345678&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650723" />
                            <option name="index" value="2" />
                            <option name="name" value="Last Run" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="44" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="44" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="fun loop(operation: LoopScope.(Long)-&gt;Unit) {&#10;    val scope = LoopScope()&#10;    var i = 0L&#10;    while (scope.run) {&#10;        scope.operation(i++)&#10;    }&#10;}&#10;&#10;class LoopScope {&#10;    var run = true&#10;        private set&#10;&#10;    fun lastRun() {&#10;        run = false&#10;    }&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="import kotlin.properties.ReadWriteProperty&#10;&#10;TODO()&#10;&#10;fun main() {&#10;    loop {&#10;        if(it == 8L) lastRun()&#10;        println(it)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996930000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;HTML DSL&lt;/h1&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650724" />
                            <option name="index" value="3" />
                            <option name="name" value="HTML DSL" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class HtmlDsl&#10;&#10;fun createTable(): HtmlDsl = TODO()&#10;//table {&#10;//    tr {&#10;//        for (i in 1..2) {&#10;//            td {&#10;//                +&quot;This is row $i&quot;&#10;//            }&#10;//        }&#10;//    }&#10;//}&#10;&#10;fun main() {&#10;    println(createTable()) //&lt;table&gt;&lt;tr&gt;&lt;td&gt;This is row 1&lt;/td&gt;&lt;td&gt;This is row 2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552998083000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Announcements DSL&lt;/h1&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650725" />
                            <option name="index" value="4" />
                            <option name="name" value="Announcements DSL" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun getAnnouncements(passingStudentsListText: String, bestStudentsListText: String): List&lt;Announcement&gt; = TODO()&#10;//        announcements {&#10;//            reminder(&quot;If you want to receive internship, you need to provide documents till end of September&quot;)&#10;//            info {&#10;//                title = &quot;Students who are passing:&quot;&#10;//                content = passingStudentsListText&#10;//            }&#10;//            info {&#10;//                title = &quot;Internships:&quot;&#10;//                content = bestStudentsListText&#10;//            }&#10;//            reminder(&quot;Work hard whole year and prepare to all classes&quot;)&#10;//            info {&#10;//                content = &quot;Checking this app periodically will help you be up to date with your university&quot;&#10;//            }&#10;//        }&#10;&#10;data class Announcement(&#10;        val title: String?,&#10;        val text: String&#10;)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.TestCase.assertEquals&#10;import junit.framework.TestCase.assertNull&#10;import org.junit.Test&#10;import kotlin.system.measureTimeMillis&#10;&#10;class Test {&#10;    @Test&#10;    fun `Reminders have title &quot;Remember!&quot;`() {&#10;        val (r1, _, _, r2, _) = getAnnouncements(&quot;&quot;, &quot;&quot;)&#10;        assertEquals(r1.title, &quot;Remember!&quot;)&#10;        assertEquals(r2.title, &quot;Remember!&quot;)&#10;    }&#10;&#10;    @Test&#10;    fun `Info without title fills it with null`() {&#10;        val (_, _, _, _, info) = getAnnouncements(&quot;&quot;, &quot;&quot;)&#10;        assertNull(info.title)&#10;    }&#10;&#10;    @Test&#10;    fun `Whole announcements list is interpreted correctly`() {&#10;        val actual = getAnnouncements(&quot;passing&quot;, &quot;internships&quot;)&#10;        val expected = listOf(&#10;                Announcement(&quot;Remember!&quot;, &quot;If you want to receive internship, you need to provide documents till end of September&quot;),&#10;                Announcement(&quot;Students who are passing:&quot;, &quot;passing&quot;),&#10;                Announcement(&quot;Internships:&quot;, &quot;internships&quot;),&#10;                Announcement(&quot;Remember!&quot;, &quot;Work hard whole year and prepare to all classes&quot;),&#10;                Announcement(null, &quot;Checking this app periodically will help you be up to date with your university&quot;)&#10;        )&#10;        assertEquals(expected, actual)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996932000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Java interoperability&lt;/h1&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="650726" />
                            <option name="index" value="5" />
                            <option name="name" value="Java interoperability" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/JavaClass.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/JavaClass.java" />
                                      <option name="text" value="import java.util.Comparator;&#10;&#10;public class JavaClass {&#10;&#10;    public static void main(String[] args) {&#10;         KotlinTopLevel.topLevelFunction()&#10;         KotlinClass.staticFunction();&#10;         KotlinPerson person = new KotlinPerson(&quot;Marcin&quot;);&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/JavaPerson.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/JavaPerson.java" />
                                      <option name="text" value="import kotlin.jvm.internal.Intrinsics;&#10;import org.jetbrains.annotations.NotNull;&#10;&#10;public class JavaPerson {&#10;&#10;    @NotNull&#10;    private String name;&#10;    private int age;&#10;&#10;    public JavaPerson(@NotNull String name, int age) {&#10;        super();&#10;        this.name = name;&#10;        this.age = age;&#10;    }&#10;&#10;    public final boolean isMature() {&#10;        return this.age &gt; 18;&#10;    }&#10;&#10;    @NotNull&#10;    public final String getName() {&#10;        return this.name;&#10;    }&#10;&#10;    public final void setName(@NotNull String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public final int getAge() {&#10;        return this.age;&#10;    }&#10;&#10;    public final void setAge(int var1) {&#10;        this.age = var1;&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/KotlinClass.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/KotlinClass.kt" />
                                      <option name="text" value="package java&#10;&#10;class KotlinClass {&#10;    companion object {&#10;        @JvmStatic&#10;        fun staticFunction() {&#10;            print(&quot;This is staticFunction&quot;)&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/KotlinPerson.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/KotlinPerson.kt" />
                                      <option name="text" value="package java&#10;&#10;class KotlinPerson(&#10;        var name: String = &quot;&quot;,&#10;        var age: Int = -1&#10;) {&#10;    val isMature: Boolean&#10;        get() = age &gt; 18&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/TopLevel.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/TopLevel.kt" />
                                      <option name="text" value="package java&#10;&#10;fun topLevelFunction(arg: String) {&#10;    print(&quot;This is topLevelFunction with arg $arg&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/JavaClass.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/JavaClass.java" />
                                      <option name="text" value="import org.junit.Test;&#10;&#10;public class JavaClass {&#10;&#10;    @Test&#10;    public static void main(String[] args) {&#10;         KotlinTopLevel.topLevelFunction()&#10;         KotlinClass.staticFunction();&#10;         KotlinPerson person = new KotlinPerson(&quot;Marcin&quot;);&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996933000" />
                          </EduTask>
                        </list>
                      </option>
                    </FrameworkLesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="215698" />
                      <option name="index" value="9" />
                      <option name="name" value="Delegates" />
                      <option name="updateDate" value="1552999253000" />
                      <option name="unitId" value="188705" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&lt;h1&gt;Mutable Lazy&lt;/h1&gt;&#10;Implement &lt;code&gt;mutableLazy&lt;/code&gt; delegate that works like a lazy, but value can be changed.&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="651538" />
                            <option name="index" value="1" />
                            <option name="name" value="MutableLazy" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="148" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="6" />
                                            <option name="offset" value="148" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="MutableLazy(initializer)&#10;&#10;private class MutableLazy&lt;T&gt;(val initializer: () -&gt; T) : ReadWriteProperty&lt;Any?, T&gt; {&#10;&#10;    private var value: T? = null&#10;    private var initialized = false&#10;&#10;    override fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): T {&#10;        synchronized(this) {&#10;            if (!initialized) {&#10;                value = initializer()&#10;                initialized = true&#10;            }&#10;            return value as T&#10;        }&#10;    }&#10;&#10;    override fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: T) {&#10;        synchronized(this) {&#10;            this.value = value&#10;            initialized = true&#10;        }&#10;    }&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="import kotlin.properties.ReadWriteProperty&#10;import kotlin.reflect.KProperty&#10;&#10;fun &lt;T&gt; mutableLazy(initializer: () -&gt; T): ReadWriteProperty&lt;Any?, T&gt; = TODO()&#10;&#10;fun main() {&#10;    var elem by mutableLazy { &quot;AAA&quot; }&#10;    print(elem) // AAA&#10;    elem = &quot;BBB&quot;&#10;    print(elem) // BBB&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Test&#10;import kotlin.system.measureTimeMillis&#10;&#10;class Test {&#10;    @Test&#10;    fun `I don't have to wait if I changed value first`() {&#10;        val time = measureTimeMillis {&#10;            var game: Game? by mutableLazy { readGameFromSave() }&#10;            game = Game()&#10;            game&#10;        }&#10;        assert(time in 0..100)&#10;    }&#10;&#10;    @Test&#10;    fun `I have to wait if I changed value first`() {&#10;        val time = measureTimeMillis {&#10;            val game: Game? by mutableLazy { readGameFromSave() }&#10;            game&#10;        }&#10;        assert(time in 450..550)&#10;    }&#10;&#10;    @Test&#10;    fun `The same object is returned every time`() {&#10;        val game by mutableLazy { object {} }&#10;        assert(game === game)&#10;    }&#10;&#10;    private class Game()&#10;&#10;    private fun readGameFromSave(): Game? {&#10;        Thread.sleep(500)&#10;        return Game()&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1552996929000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                  </list>
                </option>
              </Section>
            </list>
          </option>
        </EduCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>